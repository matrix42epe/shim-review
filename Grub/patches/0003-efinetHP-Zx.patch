--- a/grub-core/net/drivers/efi/efinet.c	2016-11-29 14:12:04.660115480 +0100
+++ b/grub-core/net/drivers/efi/efinet.c	2016-11-29 12:14:50.440598421 +0100
@@ -135,12 +135,13 @@ static grub_err_t
 open_card (struct grub_net_card *dev)
 {
   grub_efi_simple_network_t *net;
-
+  
   /* Try to reopen SNP exlusively to close any active MNP protocol instance
      that may compete for packet polling
    */
   net = grub_efi_open_protocol (dev->efi_handle, &net_io_guid,
                                 GRUB_EFI_OPEN_PROTOCOL_BY_EXCLUSIVE);
+  
   if (net)
     {
       if (net->mode->state == GRUB_EFI_NETWORK_STOPPED
@@ -234,6 +235,29 @@ grub_efinet_findcards (void)
     {
       grub_efi_simple_network_t *net;
       struct grub_net_card *card;
+      grub_efi_device_path_t *dp, *parent = NULL, *child = NULL;
+
+      /* EDK2 UEFI PXE driver creates IPv4 and IPv6 messaging devices as
+	 children of main MAC messaging device. We only need one device with
+	 bound SNP per physical card, otherwise they compete with each other
+	 when polling for incoming packets.
+       */
+      dp = grub_efi_get_device_path (*handle);
+      if (!dp)
+	continue;
+      for (; ! GRUB_EFI_END_ENTIRE_DEVICE_PATH (dp); dp = GRUB_EFI_NEXT_DEVICE_PATH (dp))
+	{
+	  parent = child;
+	  child = dp;
+	}
+      if (child
+	  && GRUB_EFI_DEVICE_PATH_TYPE (child) == GRUB_EFI_MESSAGING_DEVICE_PATH_TYPE
+	  && (GRUB_EFI_DEVICE_PATH_SUBTYPE (child) == GRUB_EFI_IPV4_DEVICE_PATH_SUBTYPE
+	      || GRUB_EFI_DEVICE_PATH_SUBTYPE (child) == GRUB_EFI_IPV6_DEVICE_PATH_SUBTYPE)
+	  && parent
+	  && GRUB_EFI_DEVICE_PATH_TYPE (parent) == GRUB_EFI_MESSAGING_DEVICE_PATH_TYPE
+	  && GRUB_EFI_DEVICE_PATH_SUBTYPE (parent) == GRUB_EFI_MAC_ADDRESS_DEVICE_PATH_SUBTYPE)
+	continue;
 
       net = grub_efi_open_protocol (*handle, &net_io_guid,
 				    GRUB_EFI_OPEN_PROTOCOL_GET_PROTOCOL);
@@ -312,13 +336,42 @@ grub_efi_net_config_real (grub_efi_handl
     grub_efi_device_path_t *cdp;
     struct grub_efi_pxe *pxe;
     struct grub_efi_pxe_mode *pxe_mode;
-    if (card->driver != &efidriver)
+    
+	if (card->driver != &efidriver)
+	{
       continue;
+	}
     cdp = grub_efi_get_device_path (card->efi_handle);
     if (! cdp)
       continue;
     if (grub_efi_compare_device_paths (dp, cdp) != 0)
-      continue;
+      {
+	grub_efi_device_path_t *ldp, *dup_dp, *dup_ldp;
+	int match;
+
+	/* EDK2 UEFI PXE driver creates pseudo devices with type IPv4/IPv6
+	   as children of Ethernet card and binds PXE and Load File protocols
+	   to it. Loaded Image Device Path protocol will point to these pseudo
+	   devices. We skip them when enumerating cards, so here we need to
+	   find matching MAC device.
+         */
+	ldp = grub_efi_find_last_device_path (dp);
+	if (GRUB_EFI_DEVICE_PATH_TYPE (ldp) != GRUB_EFI_MESSAGING_DEVICE_PATH_TYPE
+	    || (GRUB_EFI_DEVICE_PATH_SUBTYPE (ldp) != GRUB_EFI_IPV4_DEVICE_PATH_SUBTYPE
+		&& GRUB_EFI_DEVICE_PATH_SUBTYPE (ldp) != GRUB_EFI_IPV6_DEVICE_PATH_SUBTYPE))
+	  continue;
+	dup_dp = grub_efi_duplicate_device_path (dp);
+	if (!dup_dp)
+	  continue;
+	dup_ldp = grub_efi_find_last_device_path (dup_dp);
+	dup_ldp->type = GRUB_EFI_END_DEVICE_PATH_TYPE;
+	dup_ldp->subtype = GRUB_EFI_END_ENTIRE_DEVICE_PATH_SUBTYPE;
+	dup_ldp->length = sizeof (*dup_ldp);
+	match = grub_efi_compare_device_paths (dup_dp, cdp) == 0;
+	grub_free (dup_dp);
+	if (!match)
+	  continue;
+      }
     pxe = grub_efi_open_protocol (hnd, &pxe_io_guid,
 				  GRUB_EFI_OPEN_PROTOCOL_GET_PROTOCOL);
     if (! pxe)
@@ -329,7 +382,6 @@ grub_efi_net_config_real (grub_efi_handl
 	// received by both servers via, e.g. ip helper)
 	if (pxe_mode->proxy_offer_received)
 	{
-		//grub_printf("proxy_offer_received\n");
 		combined_bootp = grub_zalloc (bootpSize);
 		grub_net_merge_dhcp_ack (combined_bootp, (struct grub_net_bootp_packet*) pxe_mode->dhcp_ack);
 		grub_net_merge_dhcp_ack (combined_bootp, (struct grub_net_bootp_packet*) pxe_mode->proxy_offer);
@@ -340,7 +392,6 @@ grub_efi_net_config_real (grub_efi_handl
 		// check if we got redirected to another pxe server by the dhcp server
 		if(pxe_mode->pxe_reply_received)
 		{
-			//grub_printf("pxe_reply_received\n");
 			combined_bootp = grub_zalloc (sizeof (*combined_bootp));
 			grub_net_merge_dhcp_ack (combined_bootp, (struct grub_net_bootp_packet*) pxe_mode->dhcp_ack);
 			grub_net_merge_dhcp_ack (combined_bootp, (struct grub_net_bootp_packet*) pxe_mode->pxe_reply);
@@ -348,11 +399,16 @@ grub_efi_net_config_real (grub_efi_handl
 			grub_net_configure_by_dhcp_ack (card->name, card, 0, combined_bootp, bootpSize, 1, device, path);
 		}else
 		{
-			//grub_printf("normal offer\n");
 			// just a normal answer...
 			grub_net_configure_by_dhcp_ack (card->name, card, 0, (struct grub_net_bootp_packet *) &pxe_mode->dhcp_ack,
 				sizeof(pxe_mode->dhcp_ack), 1, device, path);
 		}
+#ifdef MX42_DEBUG
+    grub_printf("efinet: boot via card '%s', device '%s', path '%s'\n",
+		card->name!=NULL ? card->name : "NULL",
+		*device!=NULL ? *device : "NULL",
+		*path!=NULL ? *path : "NULL");
+#endif
 	}
 	//MyWait();
     return;
